// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace one_popn_model_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 21> locations_array__ =
  {" (found before start of program)",
  " (in 'one_popn_model.stan', line 18, column 2 to column 18)",
  " (in 'one_popn_model.stan', line 23, column 4 to column 28)",
  " (in 'one_popn_model.stan', line 25, column 8 to column 61)",
  " (in 'one_popn_model.stan', line 26, column 8 to column 32)",
  " (in 'one_popn_model.stan', line 24, column 23 to line 27, column 3)",
  " (in 'one_popn_model.stan', line 24, column 4 to line 27, column 3)",
  " (in 'one_popn_model.stan', line 12, column 2 to column 21)",
  " (in 'one_popn_model.stan', line 13, column 18 to column 23)",
  " (in 'one_popn_model.stan', line 13, column 2 to column 27)",
  " (in 'one_popn_model.stan', line 14, column 18 to column 23)",
  " (in 'one_popn_model.stan', line 14, column 2 to column 27)",
  " (in 'one_popn_model.stan', line 15, column 18 to column 23)",
  " (in 'one_popn_model.stan', line 15, column 2 to column 27)",
  " (in 'one_popn_model.stan', line 3, column 4 to column 135)",
  " (in 'one_popn_model.stan', line 4, column 4 to column 136)",
  " (in 'one_popn_model.stan', line 5, column 4 to column 117)",
  " (in 'one_popn_model.stan', line 6, column 4 to column 118)",
  " (in 'one_popn_model.stan', line 7, column 4 to column 25)",
  " (in 'one_popn_model.stan', line 8, column 4 to column 35)",
  " (in 'one_popn_model.stan', line 2, column 63 to line 9, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
frac_function(const T0__& N, const T1__& u, const T2__& v, const T3__& t1,
              const T4__& t2, std::ostream* pstream__);
// real frac_function(real, real, real, real, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
frac_function(const T0__& N, const T1__& u, const T2__& v, const T3__& t1,
              const T4__& t2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ k1 = DUMMY_VAR__;
    current_statement__ = 14;
    k1 = ((((((2 * N) * v) + 50) * 50) / stan::math::pow(((N * v) + 50), 2))
      * (stan::math::exp(((-(((N * v) + 50)) / (N * 50)) * t2)) -
      stan::math::exp(((-(((N * v) + 50)) / (N * 50)) * t1))));
    local_scalar_t__ k2 = DUMMY_VAR__;
    current_statement__ = 15;
    k2 = (((-((((2 * N) * u) + 50)) * 50) /
      stan::math::pow(((N * u) + 50), 2)) *
      (stan::math::exp(((-(((N * u) + 50)) / (N * 50)) * t2)) -
      stan::math::exp(((-(((N * u) + 50)) / (N * 50)) * t1))));
    local_scalar_t__ k3 = DUMMY_VAR__;
    current_statement__ = 16;
    k3 = ((v / ((N * v) + 50)) * ((t2 *
      stan::math::exp(((-(((N * v) + 50)) / (50 * N)) * t2))) - (t1 *
      stan::math::exp(((-(((N * v) + 50)) / (50 * N)) * t1)))));
    local_scalar_t__ k4 = DUMMY_VAR__;
    current_statement__ = 17;
    k4 = ((-(u) / ((N * u) + 50)) * ((t2 *
      stan::math::exp(((-(((N * u) + 50)) / (50 * N)) * t2))) - (t1 *
      stan::math::exp(((-(((N * u) + 50)) / (50 * N)) * t1)))));
    local_scalar_t__ r = DUMMY_VAR__;
    current_statement__ = 18;
    r = stan::math::exp((t1 / N));
    current_statement__ = 19;
    return (r * (((k1 + k2) + k3) + k4));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class one_popn_model_model final : public model_base_crtp<one_popn_model_model> {
 private:
  int N_obs;
  Eigen::Matrix<double,-1,1> u_data__;
  Eigen::Matrix<double,-1,1> v_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> u{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> v{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
 public:
  ~one_popn_model_model() {}
  one_popn_model_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "one_popn_model_model_namespace::one_popn_model_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 7;
      context__.validate_dims("data initialization", "N_obs", "int",
        std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      current_statement__ = 7;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "N_obs", N_obs, 0);
      current_statement__ = 8;
      stan::math::validate_non_negative_index("u", "N_obs", N_obs);
      current_statement__ = 9;
      context__.validate_dims("data initialization", "u", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      u_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&u) Eigen::Map<Eigen::Matrix<double,-1,1>>(u_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 9;
        u_flat__ = context__.vals_r("u");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(u, u_flat__[(pos__ - 1)],
            "assigning variable u", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "u", u, 0);
      current_statement__ = 10;
      stan::math::validate_non_negative_index("v", "N_obs", N_obs);
      current_statement__ = 11;
      context__.validate_dims("data initialization", "v", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      v_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&v) Eigen::Map<Eigen::Matrix<double,-1,1>>(v_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 11;
        v_flat__ = context__.vals_r("v");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "v", v, 0);
      current_statement__ = 12;
      stan::math::validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 13;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 13;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1;
  }
  inline std::string model_name() const final {
    return "one_popn_model_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=one_popn_model.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "one_popn_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ N = DUMMY_VAR__;
      current_statement__ = 1;
      N = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      {
        current_statement__ = 2;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(N, 6.25, 0.00125));
        current_statement__ = 6;
        for (int i = 1; i <= N_obs; ++i) {
          local_scalar_t__ mu = DUMMY_VAR__;
          current_statement__ = 3;
          mu = frac_function(N,
                 stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                 stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                 static_cast<double>(0), static_cast<double>(100000000),
                 pstream__);
          current_statement__ = 4;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)), mu, 0.25));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "one_popn_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ N = DUMMY_VAR__;
      current_statement__ = 1;
      N = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      {
        current_statement__ = 2;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(N, 6.25, 0.00125));
        current_statement__ = 6;
        for (int i = 1; i <= N_obs; ++i) {
          local_scalar_t__ mu = DUMMY_VAR__;
          current_statement__ = 3;
          mu = frac_function(N,
                 stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                 stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                 static_cast<double>(0), static_cast<double>(100000000),
                 pstream__);
          current_statement__ = 4;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)), mu, 0.25));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "one_popn_model_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double N = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      N = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      out__.write(N);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ N = DUMMY_VAR__;
      current_statement__ = 1;
      N = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "N", "double",
        std::vector<size_t>{});
      local_scalar_t__ N = DUMMY_VAR__;
      current_statement__ = 1;
      N = context__.vals_r("N")[(1 - 1)];
      out__.write_free_lb(0, N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"N"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "N");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "N");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 1;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 1;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = one_popn_model_model_namespace::one_popn_model_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return one_popn_model_model_namespace::profiles__;
}
#endif