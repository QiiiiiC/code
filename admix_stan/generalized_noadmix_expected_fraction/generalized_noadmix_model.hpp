// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace generalized_noadmix_model_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 94> locations_array__ =
  {" (found before start of program)",
  " (in 'generalized_noadmix_model.stan', line 83, column 4 to column 30)",
  " (in 'generalized_noadmix_model.stan', line 84, column 4 to column 32)",
  " (in 'generalized_noadmix_model.stan', line 89, column 6 to column 33)",
  " (in 'generalized_noadmix_model.stan', line 88, column 24 to line 90, column 5)",
  " (in 'generalized_noadmix_model.stan', line 88, column 4 to line 90, column 5)",
  " (in 'generalized_noadmix_model.stan', line 92, column 6 to column 33)",
  " (in 'generalized_noadmix_model.stan', line 91, column 26 to line 93, column 5)",
  " (in 'generalized_noadmix_model.stan', line 91, column 4 to line 93, column 5)",
  " (in 'generalized_noadmix_model.stan', line 96, column 6 to column 83)",
  " (in 'generalized_noadmix_model.stan', line 97, column 6 to column 36)",
  " (in 'generalized_noadmix_model.stan', line 95, column 23 to line 98, column 3)",
  " (in 'generalized_noadmix_model.stan', line 95, column 4 to line 98, column 3)",
  " (in 'generalized_noadmix_model.stan', line 69, column 2 to column 21)",
  " (in 'generalized_noadmix_model.stan', line 70, column 2 to column 26)",
  " (in 'generalized_noadmix_model.stan', line 71, column 2 to column 22)",
  " (in 'generalized_noadmix_model.stan', line 72, column 2 to column 24)",
  " (in 'generalized_noadmix_model.stan', line 73, column 2 to column 22)",
  " (in 'generalized_noadmix_model.stan', line 74, column 18 to column 24)",
  " (in 'generalized_noadmix_model.stan', line 74, column 2 to column 28)",
  " (in 'generalized_noadmix_model.stan', line 75, column 8 to column 18)",
  " (in 'generalized_noadmix_model.stan', line 75, column 27 to column 33)",
  " (in 'generalized_noadmix_model.stan', line 75, column 35 to column 41)",
  " (in 'generalized_noadmix_model.stan', line 75, column 2 to column 45)",
  " (in 'generalized_noadmix_model.stan', line 76, column 18 to column 23)",
  " (in 'generalized_noadmix_model.stan', line 76, column 2 to column 27)",
  " (in 'generalized_noadmix_model.stan', line 77, column 18 to column 23)",
  " (in 'generalized_noadmix_model.stan', line 77, column 2 to column 27)",
  " (in 'generalized_noadmix_model.stan', line 78, column 18 to column 23)",
  " (in 'generalized_noadmix_model.stan', line 78, column 2 to column 27)",
  " (in 'generalized_noadmix_model.stan', line 79, column 8 to column 13)",
  " (in 'generalized_noadmix_model.stan', line 79, column 2 to column 27)",
  " (in 'generalized_noadmix_model.stan', line 83, column 20 to column 26)",
  " (in 'generalized_noadmix_model.stan', line 84, column 20 to column 28)",
  " (in 'generalized_noadmix_model.stan', line 3, column 4 to column 28)",
  " (in 'generalized_noadmix_model.stan', line 4, column 11 to column 16)",
  " (in 'generalized_noadmix_model.stan', line 4, column 4 to column 29)",
  " (in 'generalized_noadmix_model.stan', line 6, column 6 to column 27)",
  " (in 'generalized_noadmix_model.stan', line 5, column 19 to line 7, column 5)",
  " (in 'generalized_noadmix_model.stan', line 5, column 4 to line 7, column 5)",
  " (in 'generalized_noadmix_model.stan', line 8, column 4 to column 34)",
  " (in 'generalized_noadmix_model.stan', line 9, column 4 to column 22)",
  " (in 'generalized_noadmix_model.stan', line 2, column 58 to line 10, column 3)",
  " (in 'generalized_noadmix_model.stan', line 13, column 4 to column 28)",
  " (in 'generalized_noadmix_model.stan', line 14, column 11 to column 16)",
  " (in 'generalized_noadmix_model.stan', line 14, column 4 to column 29)",
  " (in 'generalized_noadmix_model.stan', line 15, column 4 to column 30)",
  " (in 'generalized_noadmix_model.stan', line 17, column 6 to column 31)",
  " (in 'generalized_noadmix_model.stan', line 16, column 19 to line 18, column 5)",
  " (in 'generalized_noadmix_model.stan', line 16, column 4 to line 18, column 5)",
  " (in 'generalized_noadmix_model.stan', line 19, column 4 to column 22)",
  " (in 'generalized_noadmix_model.stan', line 12, column 59 to line 20, column 3)",
  " (in 'generalized_noadmix_model.stan', line 23, column 11 to column 12)",
  " (in 'generalized_noadmix_model.stan', line 23, column 4 to column 37)",
  " (in 'generalized_noadmix_model.stan', line 24, column 4 to column 15)",
  " (in 'generalized_noadmix_model.stan', line 25, column 4 to column 13)",
  " (in 'generalized_noadmix_model.stan', line 22, column 40 to line 26, column 3)",
  " (in 'generalized_noadmix_model.stan', line 30, column 4 to column 135)",
  " (in 'generalized_noadmix_model.stan', line 31, column 4 to column 136)",
  " (in 'generalized_noadmix_model.stan', line 32, column 4 to column 117)",
  " (in 'generalized_noadmix_model.stan', line 33, column 4 to column 118)",
  " (in 'generalized_noadmix_model.stan', line 34, column 4 to column 25)",
  " (in 'generalized_noadmix_model.stan', line 35, column 4 to column 35)",
  " (in 'generalized_noadmix_model.stan', line 29, column 63 to line 36, column 3)",
  " (in 'generalized_noadmix_model.stan', line 39, column 4 to column 35)",
  " (in 'generalized_noadmix_model.stan', line 40, column 4 to column 33)",
  " (in 'generalized_noadmix_model.stan', line 41, column 4 to column 17)",
  " (in 'generalized_noadmix_model.stan', line 42, column 4 to column 20)",
  " (in 'generalized_noadmix_model.stan', line 43, column 11 to column 17)",
  " (in 'generalized_noadmix_model.stan', line 43, column 4 to column 56)",
  " (in 'generalized_noadmix_model.stan', line 44, column 11 to column 17)",
  " (in 'generalized_noadmix_model.stan', line 44, column 4 to column 56)",
  " (in 'generalized_noadmix_model.stan', line 46, column 11 to column 21)",
  " (in 'generalized_noadmix_model.stan', line 46, column 4 to column 67)",
  " (in 'generalized_noadmix_model.stan', line 47, column 11 to column 21)",
  " (in 'generalized_noadmix_model.stan', line 47, column 4 to column 66)",
  " (in 'generalized_noadmix_model.stan', line 50, column 6 to column 27)",
  " (in 'generalized_noadmix_model.stan', line 51, column 6 to column 27)",
  " (in 'generalized_noadmix_model.stan', line 52, column 13 to column 19)",
  " (in 'generalized_noadmix_model.stan', line 52, column 6 to column 54)",
  " (in 'generalized_noadmix_model.stan', line 54, column 8 to column 79)",
  " (in 'generalized_noadmix_model.stan', line 53, column 25 to line 55, column 7)",
  " (in 'generalized_noadmix_model.stan', line 53, column 6 to line 55, column 7)",
  " (in 'generalized_noadmix_model.stan', line 56, column 13 to column 19)",
  " (in 'generalized_noadmix_model.stan', line 56, column 6 to column 50)",
  " (in 'generalized_noadmix_model.stan', line 58, column 8 to column 49)",
  " (in 'generalized_noadmix_model.stan', line 57, column 26 to line 59, column 7)",
  " (in 'generalized_noadmix_model.stan', line 57, column 6 to line 59, column 7)",
  " (in 'generalized_noadmix_model.stan', line 60, column 6 to column 47)",
  " (in 'generalized_noadmix_model.stan', line 61, column 6 to column 28)",
  " (in 'generalized_noadmix_model.stan', line 49, column 30 to line 62, column 5)",
  " (in 'generalized_noadmix_model.stan', line 49, column 4 to line 62, column 5)",
  " (in 'generalized_noadmix_model.stan', line 63, column 4 to column 15)",
  " (in 'generalized_noadmix_model.stan', line 38, column 89 to line 64, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_value_to_vector(const T0__& v_arg__, const T1__& new_value,
                       std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
prepend_value_to_vector(const T0__& v_arg__, const T1__& new_value,
                        std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<double,-1,1>
indicator_vector(const T0__& d, const T1__& i, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
frac_function(const T0__& N, const T1__& u, const T2__& v, const T3__& t1,
              const T4__& t2, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_std_vector<T2__>,
                              stan::is_eigen_matrix_dynamic<stan::value_type_t<T2__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>,
                              std::is_integral<T5__>, std::is_integral<T6__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, T3__, T4__>
expected_ratio(const T0__& N_arg__, const T1__& T_arg__, const T2__& A,
               const T3__& u, const T4__& v, const T5__& j, const T6__& k,
               std::ostream* pstream__);
// vector append_value_to_vector(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_value_to_vector(const T0__& v_arg__, const T1__& new_value,
                       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& v = stan::math::to_ref(v_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 34;
    n = stan::math::num_elements(v);
    current_statement__ = 35;
    stan::math::validate_non_negative_index("new_vector", "n + 1", (n + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> new_vector =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n + 1), DUMMY_VAR__);
    current_statement__ = 39;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 37;
      stan::model::assign(new_vector,
        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
        "assigning variable new_vector", stan::model::index_uni(i));
    }
    current_statement__ = 40;
    stan::model::assign(new_vector, new_value,
      "assigning variable new_vector", stan::model::index_uni((n + 1)));
    current_statement__ = 41;
    return new_vector;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector prepend_value_to_vector(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
prepend_value_to_vector(const T0__& v_arg__, const T1__& new_value,
                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& v = stan::math::to_ref(v_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 43;
    n = stan::math::num_elements(v);
    current_statement__ = 44;
    stan::math::validate_non_negative_index("new_vector", "n + 1", (n + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> new_vector =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n + 1), DUMMY_VAR__);
    current_statement__ = 46;
    stan::model::assign(new_vector, new_value,
      "assigning variable new_vector", stan::model::index_uni(1));
    current_statement__ = 49;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 47;
      stan::model::assign(new_vector,
        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
        "assigning variable new_vector", stan::model::index_uni((i + 1)));
    }
    current_statement__ = 50;
    return new_vector;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector indicator_vector(int, int)
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>*>
Eigen::Matrix<double,-1,1>
indicator_vector(const T0__& d, const T1__& i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 52;
    stan::math::validate_non_negative_index("v", "d", d);
    Eigen::Matrix<local_scalar_t__,-1,1> v =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__);
    current_statement__ = 53;
    stan::model::assign(v, stan::math::rep_vector(0.0, d),
      "assigning variable v");
    current_statement__ = 54;
    stan::model::assign(v, 1.0, "assigning variable v",
      stan::model::index_uni(i));
    current_statement__ = 55;
    return v;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real frac_function(real, real, real, real, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
frac_function(const T0__& N, const T1__& u, const T2__& v, const T3__& t1,
              const T4__& t2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ k1 = DUMMY_VAR__;
    current_statement__ = 57;
    k1 = ((((((2 * N) * v) + 50) * 50) / stan::math::pow(((N * v) + 50), 2))
      * (stan::math::exp(((-(((N * v) + 50)) / (N * 50)) * t2)) -
      stan::math::exp(((-(((N * v) + 50)) / (N * 50)) * t1))));
    local_scalar_t__ k2 = DUMMY_VAR__;
    current_statement__ = 58;
    k2 = (((-((((2 * N) * u) + 50)) * 50) /
      stan::math::pow(((N * u) + 50), 2)) *
      (stan::math::exp(((-(((N * u) + 50)) / (N * 50)) * t2)) -
      stan::math::exp(((-(((N * u) + 50)) / (N * 50)) * t1))));
    local_scalar_t__ k3 = DUMMY_VAR__;
    current_statement__ = 59;
    k3 = ((v / ((N * v) + 50)) * ((t2 *
      stan::math::exp(((-(((N * v) + 50)) / (50 * N)) * t2))) - (t1 *
      stan::math::exp(((-(((N * v) + 50)) / (50 * N)) * t1)))));
    local_scalar_t__ k4 = DUMMY_VAR__;
    current_statement__ = 60;
    k4 = ((-(u) / ((N * u) + 50)) * ((t2 *
      stan::math::exp(((-(((N * u) + 50)) / (50 * N)) * t2))) - (t1 *
      stan::math::exp(((-(((N * u) + 50)) / (50 * N)) * t1)))));
    local_scalar_t__ r = DUMMY_VAR__;
    current_statement__ = 61;
    r = stan::math::exp((t1 / N));
    current_statement__ = 62;
    return (r * (((k1 + k2) + k3) + k4));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real expected_ratio(vector, vector, array[] matrix, real, real, int, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_std_vector<T2__>,
                              stan::is_eigen_matrix_dynamic<stan::value_type_t<T2__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>,
                              std::is_integral<T5__>, std::is_integral<T6__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, T3__, T4__>
expected_ratio(const T0__& N_arg__, const T1__& T_arg__, const T2__& A,
               const T3__& u, const T4__& v, const T5__& j, const T6__& k,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& N = stan::math::to_ref(N_arg__);
  const auto& T = stan::math::to_ref(T_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_events = std::numeric_limits<int>::min();
    current_statement__ = 64;
    N_events = stan::math::num_elements(T);
    int N_popn = std::numeric_limits<int>::min();
    current_statement__ = 65;
    N_popn = stan::math::num_elements(N);
    local_scalar_t__ out = DUMMY_VAR__;
    current_statement__ = 66;
    out = 0;
    local_scalar_t__ weight = DUMMY_VAR__;
    current_statement__ = 67;
    weight = 1;
    current_statement__ = 68;
    stan::math::validate_non_negative_index("dist_j", "N_popn", N_popn);
    Eigen::Matrix<local_scalar_t__,-1,1> dist_j =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
    current_statement__ = 69;
    stan::model::assign(dist_j, indicator_vector(N_popn, j, pstream__),
      "assigning variable dist_j");
    current_statement__ = 70;
    stan::math::validate_non_negative_index("dist_k", "N_popn", N_popn);
    Eigen::Matrix<local_scalar_t__,-1,1> dist_k =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
    current_statement__ = 71;
    stan::model::assign(dist_k, indicator_vector(N_popn, k, pstream__),
      "assigning variable dist_k");
    current_statement__ = 72;
    stan::math::validate_non_negative_index("T_new", "N_events + 1",
      (N_events + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> T_new =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((N_events + 1),
        DUMMY_VAR__);
    current_statement__ = 73;
    stan::model::assign(T_new,
      append_value_to_vector(T, static_cast<double>(100000000), pstream__),
      "assigning variable T_new");
    current_statement__ = 74;
    stan::math::validate_non_negative_index("T_final", "N_events + 2",
      (N_events + 2));
    Eigen::Matrix<local_scalar_t__,-1,1> T_final =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((N_events + 2),
        DUMMY_VAR__);
    current_statement__ = 75;
    stan::model::assign(T_final,
      prepend_value_to_vector(T_new, static_cast<double>(0), pstream__),
      "assigning variable T_final");
    current_statement__ = 91;
    for (int i = 1; i <= (N_events + 1); ++i) {
      current_statement__ = 76;
      stan::model::assign(dist_j,
        stan::math::multiply(
          stan::model::rvalue(A, "A", stan::model::index_uni(i)),
          stan::model::deep_copy(dist_j)), "assigning variable dist_j");
      current_statement__ = 77;
      stan::model::assign(dist_k,
        stan::math::multiply(
          stan::model::rvalue(A, "A", stan::model::index_uni(i)),
          stan::model::deep_copy(dist_k)), "assigning variable dist_k");
      current_statement__ = 78;
      stan::math::validate_non_negative_index("dist_together", "N_popn",
        N_popn);
      Eigen::Matrix<local_scalar_t__,-1,1> dist_together =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
      current_statement__ = 79;
      stan::model::assign(dist_together,
        stan::math::elt_multiply(dist_j, dist_k),
        "assigning variable dist_together");
      current_statement__ = 82;
      for (int l = 1; l <= N_popn; ++l) {
        current_statement__ = 80;
        out = (out + ((weight *
          frac_function(
            stan::model::rvalue(N, "N", stan::model::index_uni(l)), u, v,
            stan::model::rvalue(T, "T", stan::model::index_uni(i)),
            stan::model::rvalue(T, "T", stan::model::index_uni((i + 1))),
            pstream__))
          *
          stan::model::rvalue(dist_together, "dist_together",
            stan::model::index_uni(l))));
      }
      current_statement__ = 83;
      stan::math::validate_non_negative_index("ff", "N_popn", N_popn);
      Eigen::Matrix<local_scalar_t__,-1,1> ff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
      current_statement__ = 84;
      stan::model::assign(ff, stan::math::rep_vector(0.0, N_popn),
        "assigning variable ff");
      current_statement__ = 87;
      for (int l = 1; l <= N_popn; ++l) {
        current_statement__ = 85;
        stan::model::assign(ff, (1 -
          stan::math::exp(
            (-((stan::model::rvalue(T, "T", stan::model::index_uni((i + 1)))
            - stan::model::rvalue(T, "T", stan::model::index_uni(i)))) /
            stan::model::rvalue(N, "N", stan::model::index_uni(l))))),
          "assigning variable ff", stan::model::index_uni(l));
      }
      local_scalar_t__ gj = DUMMY_VAR__;
      current_statement__ = 88;
      gj = stan::math::dot_product(dist_together, ff);
      current_statement__ = 89;
      weight = (weight - (gj * weight));
    }
    current_statement__ = 92;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class generalized_noadmix_model_model final : public model_base_crtp<generalized_noadmix_model_model> {
 private:
  int N_obs;
  int N_starting;
  int N_popn;
  int N_events;
  int N_bins;
  Eigen::Matrix<double,-1,1> L_data__;
  std::vector<Eigen::Matrix<double,-1,-1>> A;
  Eigen::Matrix<double,-1,1> u_data__;
  Eigen::Matrix<double,-1,1> v_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  std::vector<std::vector<int>> group;
  Eigen::Map<Eigen::Matrix<double,-1,1>> L{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> u{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> v{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
 public:
  ~generalized_noadmix_model_model() {}
  generalized_noadmix_model_model(stan::io::var_context& context__,
                                  unsigned int random_seed__ = 0,
                                  std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "generalized_noadmix_model_model_namespace::generalized_noadmix_model_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization", "N_obs", "int",
        std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      current_statement__ = 13;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "N_obs", N_obs, 0);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "N_starting", "int",
        std::vector<size_t>{});
      N_starting = std::numeric_limits<int>::min();
      current_statement__ = 14;
      N_starting = context__.vals_i("N_starting")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "N_starting",
        N_starting, 0);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "N_popn", "int",
        std::vector<size_t>{});
      N_popn = std::numeric_limits<int>::min();
      current_statement__ = 15;
      N_popn = context__.vals_i("N_popn")[(1 - 1)];
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "N_popn", N_popn, 0);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "N_events", "int",
        std::vector<size_t>{});
      N_events = std::numeric_limits<int>::min();
      current_statement__ = 16;
      N_events = context__.vals_i("N_events")[(1 - 1)];
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "N_events", N_events, 0);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "N_bins", "int",
        std::vector<size_t>{});
      N_bins = std::numeric_limits<int>::min();
      current_statement__ = 17;
      N_bins = context__.vals_i("N_bins")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "N_bins", N_bins, 0);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("L", "N_bins", N_bins);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "L", "double",
        std::vector<size_t>{static_cast<size_t>(N_bins)});
      L_data__ = Eigen::Matrix<double,-1,1>::Constant(N_bins,
                   std::numeric_limits<double>::quiet_NaN());
      new (&L) Eigen::Map<Eigen::Matrix<double,-1,1>>(L_data__.data(),
        N_bins);
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 19;
        L_flat__ = context__.vals_r("L");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_bins; ++sym1__) {
          stan::model::assign(L, L_flat__[(pos__ - 1)],
            "assigning variable L", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "L", L, 0);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("A", "N_events + 1", (N_events
        + 1));
      current_statement__ = 21;
      stan::math::validate_non_negative_index("A", "N_popn", N_popn);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("A", "N_popn", N_popn);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "A", "double",
        std::vector<size_t>{static_cast<size_t>((N_events + 1)),
          static_cast<size_t>(N_popn), static_cast<size_t>(N_popn)});
      A = std::vector<Eigen::Matrix<double,-1,-1>>((N_events + 1),
            Eigen::Matrix<double,-1,-1>::Constant(N_popn, N_popn,
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> A_flat__;
        current_statement__ = 23;
        A_flat__ = context__.vals_r("A");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_popn; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_popn; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= (N_events + 1); ++sym3__) {
              stan::model::assign(A, A_flat__[(pos__ - 1)],
                "assigning variable A", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 24;
      stan::math::validate_non_negative_index("u", "N_obs", N_obs);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "u", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      u_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&u) Eigen::Map<Eigen::Matrix<double,-1,1>>(u_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 25;
        u_flat__ = context__.vals_r("u");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(u, u_flat__[(pos__ - 1)],
            "assigning variable u", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "u", u, 0);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("v", "N_obs", N_obs);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "v", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      v_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&v) Eigen::Map<Eigen::Matrix<double,-1,1>>(v_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 27;
        v_flat__ = context__.vals_r("v");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "v", v, 0);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 29;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("group", "N_obs", N_obs);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "group", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs),
          static_cast<size_t>(2)});
      group = std::vector<std::vector<int>>(N_obs,
                std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> group_flat__;
        current_statement__ = 31;
        group_flat__ = context__.vals_i("group");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_obs; ++sym2__) {
            stan::model::assign(group, group_flat__[(pos__ - 1)],
              "assigning variable group", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 32;
      stan::math::validate_non_negative_index("N", "N_popn", N_popn);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("T", "N_events", N_events);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_popn + N_events;
  }
  inline std::string model_name() const final {
    return "generalized_noadmix_model_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=generalized_noadmix_model.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "generalized_noadmix_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
      current_statement__ = 1;
      N = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            N_popn);
      Eigen::Matrix<local_scalar_t__,-1,1> T =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_events, DUMMY_VAR__);
      current_statement__ = 2;
      T = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            N_events);
      {
        current_statement__ = 5;
        for (int i = 1; i <= N_popn; ++i) {
          current_statement__ = 3;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(N, "N",
                             stan::model::index_uni(i)), 6.25, 0.00125));
        }
        current_statement__ = 8;
        for (int i = 1; i <= N_events; ++i) {
          current_statement__ = 6;
          lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                           stan::model::rvalue(T, "T",
                             stan::model::index_uni(i)), (1.0 / 25)));
        }
        current_statement__ = 12;
        for (int i = 1; i <= N_obs; ++i) {
          local_scalar_t__ true_mean = DUMMY_VAR__;
          current_statement__ = 9;
          true_mean = expected_ratio(N, T, A,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i),
                          stan::model::index_uni(2)), pstream__);
          current_statement__ = 10;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)), true_mean, 0.25));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "generalized_noadmix_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
      current_statement__ = 1;
      N = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            N_popn);
      Eigen::Matrix<local_scalar_t__,-1,1> T =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_events, DUMMY_VAR__);
      current_statement__ = 2;
      T = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            N_events);
      {
        current_statement__ = 5;
        for (int i = 1; i <= N_popn; ++i) {
          current_statement__ = 3;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(N, "N",
                             stan::model::index_uni(i)), 6.25, 0.00125));
        }
        current_statement__ = 8;
        for (int i = 1; i <= N_events; ++i) {
          current_statement__ = 6;
          lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                           stan::model::rvalue(T, "T",
                             stan::model::index_uni(i)), (1.0 / 25)));
        }
        current_statement__ = 12;
        for (int i = 1; i <= N_obs; ++i) {
          local_scalar_t__ true_mean = DUMMY_VAR__;
          current_statement__ = 9;
          true_mean = expected_ratio(N, T, A,
                        stan::model::rvalue(u, "u", stan::model::index_uni(i)),
                        stan::model::rvalue(v, "v", stan::model::index_uni(i)),
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(group, "group",
                          stan::model::index_uni(i),
                          stan::model::index_uni(2)), pstream__);
          current_statement__ = 10;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)), true_mean, 0.25));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "generalized_noadmix_model_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> N =
        Eigen::Matrix<double,-1,1>::Constant(N_popn,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      N = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            N_popn);
      Eigen::Matrix<double,-1,1> T =
        Eigen::Matrix<double,-1,1>::Constant(N_events,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      T = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            N_events);
      out__.write(N);
      out__.write(T);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(N,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_popn),
        "assigning variable N");
      out__.write_free_lb(0, N);
      Eigen::Matrix<local_scalar_t__,-1,1> T =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_events, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(T,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_events),
        "assigning variable T");
      out__.write_free_lb(0, T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "N", "double",
        std::vector<size_t>{static_cast<size_t>(N_popn)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "T", "double",
        std::vector<size_t>{static_cast<size_t>(N_events)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> N =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_popn, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> N_flat__;
        current_statement__ = 1;
        N_flat__ = context__.vals_r("N");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_popn; ++sym1__) {
          stan::model::assign(N, N_flat__[(pos__ - 1)],
            "assigning variable N", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, N);
      Eigen::Matrix<local_scalar_t__,-1,1> T =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_events, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> T_flat__;
        current_statement__ = 2;
        T_flat__ = context__.vals_r("T");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N_events; ++sym1__) {
          stan::model::assign(T, T_flat__[(pos__ - 1)],
            "assigning variable T", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"N", "T"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    N_popn)},
                std::vector<size_t>{static_cast<size_t>(N_events)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_popn; ++sym1__) {
      param_names__.emplace_back(std::string() + "N" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_events; ++sym1__) {
      param_names__.emplace_back(std::string() + "T" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N_popn; ++sym1__) {
      param_names__.emplace_back(std::string() + "N" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_events; ++sym1__) {
      param_names__.emplace_back(std::string() + "T" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_popn) + "},\"block\":\"parameters\"},{\"name\":\"T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_events) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_popn) + "},\"block\":\"parameters\"},{\"name\":\"T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_events) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (N_popn + N_events);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (N_popn + N_events);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = generalized_noadmix_model_model_namespace::generalized_noadmix_model_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return generalized_noadmix_model_model_namespace::profiles__;
}
#endif